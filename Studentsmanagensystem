import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.io.*;

// Student Model Class
class Student implements Serializable {
    private String studentId;
    private String firstName;
    private String lastName;
    private String email;
    private String phone;
    private LocalDate dateOfBirth;
    private String course;
    private double gpa;
    private String status;
    
    public Student(String studentId, String firstName, String lastName, String email, 
                  String phone, LocalDate dateOfBirth, String course, double gpa, String status) {
        this.studentId = studentId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.phone = phone;
        this.dateOfBirth = dateOfBirth;
        this.course = course;
        this.gpa = gpa;
        this.status = status;
    }
    
    // Getters and Setters
    public String getStudentId() { return studentId; }
    public void setStudentId(String studentId) { this.studentId = studentId; }
    
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    
    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
    
    public LocalDate getDateOfBirth() { return dateOfBirth; }
    public void setDateOfBirth(LocalDate dateOfBirth) { this.dateOfBirth = dateOfBirth; }
    
    public String getCourse() { return course; }
    public void setCourse(String course) { this.course = course; }
    
    public double getGpa() { return gpa; }
    public void setGpa(double gpa) { this.gpa = gpa; }
    
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
    
    public String getFullName() {
        return firstName + " " + lastName;
    }
}

// Custom Table Model
class StudentTableModel extends AbstractTableModel {
    private final String[] columnNames = {"ID", "Name", "Email", "Phone", "Course", "GPA", "Status"};
    private List<Student> students;
    
    public StudentTableModel(List<Student> students) {
        this.students = students;
    }
    
    @Override
    public int getRowCount() {
        return students.size();
    }
    
    @Override
    public int getColumnCount() {
        return columnNames.length;
    }
    
    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }
    
    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Student student = students.get(rowIndex);
        switch (columnIndex) {
            case 0: return student.getStudentId();
            case 1: return student.getFullName();
            case 2: return student.getEmail();
            case 3: return student.getPhone();
            case 4: return student.getCourse();
            case 5: return String.format("%.2f", student.getGpa());
            case 6: return student.getStatus();
            default: return null;
        }
    }
    
    public Student getStudentAt(int rowIndex) {
        return students.get(rowIndex);
    }
    
    public void updateData(List<Student> newStudents) {
        this.students = newStudents;
        fireTableDataChanged();
    }
}

// Data Service for CRUD operations
class StudentService {
    private List<Student> students;
    private final String DATA_FILE = "students.dat";
    
    public StudentService() {
        students = new ArrayList<>();
        loadData();
    }
    
    public void addStudent(Student student) {
        students.add(student);
        saveData();
    }
    
    public void updateStudent(int index, Student student) {
        if (index >= 0 && index < students.size()) {
            students.set(index, student);
            saveData();
        }
    }
    
    public void deleteStudent(int index) {
        if (index >= 0 && index < students.size()) {
            students.remove(index);
            saveData();
        }
    }
    
    public List<Student> getAllStudents() {
        return new ArrayList<>(students);
    }
    
    public List<Student> searchStudents(String query) {
        return students.stream()
                .filter(s -> s.getFullName().toLowerCase().contains(query.toLowerCase()) ||
                           s.getStudentId().toLowerCase().contains(query.toLowerCase()) ||
                           s.getEmail().toLowerCase().contains(query.toLowerCase()) ||
                           s.getCourse().toLowerCase().contains(query.toLowerCase()))
                .collect(Collectors.toList());
    }
    
    public boolean isStudentIdExists(String studentId) {
        return students.stream().anyMatch(s -> s.getStudentId().equals(studentId));
    }
    
    @SuppressWarnings("unchecked")
    private void loadData() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(DATA_FILE))) {
            students = (List<Student>) ois.readObject();
        } catch (Exception e) {
            // If file doesn't exist or error reading, start with sample data
            initializeSampleData();
        }
    }
    
    private void saveData() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(DATA_FILE))) {
            oos.writeObject(students);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving data: " + e.getMessage());
        }
    }
    
    private void initializeSampleData() {
        students.add(new Student("STU001", "John", "Doe", "john.doe@email.com", 
                                "123-456-7890", LocalDate.of(2000, 5, 15), "Computer Science", 3.8, "Active"));
        students.add(new Student("STU002", "Jane", "Smith", "jane.smith@email.com", 
                                "098-765-4321", LocalDate.of(1999, 8, 22), "Business Administration", 3.6, "Active"));
        students.add(new Student("STU003", "Mike", "Johnson", "mike.johnson@email.com", 
                                "555-123-4567", LocalDate.of(2001, 2, 10), "Engineering", 3.9, "Active"));
    }
}

// Custom UI Components
class ModernButton extends JButton {
    private Color backgroundColor = new Color(74, 144, 226);
    private Color hoverColor = new Color(54, 124, 206);
    
    public ModernButton(String text) {
        super(text);
        setOpaque(false);
        setFocusPainted(false);
        setBorderPainted(false);
        setContentAreaFilled(false);
        setForeground(Color.WHITE);
        setFont(new Font("Segoe UI", Font.BOLD, 12));
        setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                backgroundColor = hoverColor;
                repaint();
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                backgroundColor = new Color(74, 144, 226);
                repaint();
            }
        });
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2d = (Graphics2D) g.create();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setColor(backgroundColor);
        g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 10, 10);
        g2d.dispose();
        super.paintComponent(g);
    }
}

class ModernTextField extends JTextField {
    public ModernTextField() {
        super();
        setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 200)),
                BorderFactory.createEmptyBorder(8, 12, 8, 12)));
        setFont(new Font("Segoe UI", Font.PLAIN, 14));
    }
}

// Student Form Dialog
class StudentFormDialog extends JDialog {
    private ModernTextField txtStudentId, txtFirstName, txtLastName, txtEmail, txtPhone, txtCourse, txtGpa;
    private JComboBox<String> cmbStatus;
    private JSpinner dateSpinner;
    private boolean confirmed = false;
    private Student student;
    private StudentService studentService;
    
    public StudentFormDialog(Frame parent, String title, Student student, StudentService studentService) {
        super(parent, title, true);
        this.student = student;
        this.studentService = studentService;
        initComponents();
        setupLayout();
        setupEvents();
        
        if (student != null) {
            populateFields();
        }
        
        setSize(450, 500);
        setLocationRelativeTo(parent);
        setResizable(false);
    }
    
    private void initComponents() {
        txtStudentId = new ModernTextField();
        txtFirstName = new ModernTextField();
        txtLastName = new ModernTextField();
        txtEmail = new ModernTextField();
        txtPhone = new ModernTextField();
        txtCourse = new ModernTextField();
        txtGpa = new ModernTextField();
        
        cmbStatus = new JComboBox<>(new String[]{"Active", "Inactive", "Graduated", "Suspended"});
        cmbStatus.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        dateSpinner = new JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(dateSpinner, "yyyy-MM-dd");
        dateSpinner.setEditor(dateEditor);
        dateSpinner.setFont(new Font("Segoe UI", Font.PLAIN, 14));
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(Color.WHITE);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.anchor = GridBagConstraints.WEST;
        
        // Form fields
        addFormField(mainPanel, gbc, 0, "Student ID:", txtStudentId);
        addFormField(mainPanel, gbc, 1, "First Name:", txtFirstName);
        addFormField(mainPanel, gbc, 2, "Last Name:", txtLastName);
        addFormField(mainPanel, gbc, 3, "Email:", txtEmail);
        addFormField(mainPanel, gbc, 4, "Phone:", txtPhone);
        addFormField(mainPanel, gbc, 5, "Date of Birth:", dateSpinner);
        addFormField(mainPanel, gbc, 6, "Course:", txtCourse);
        addFormField(mainPanel, gbc, 7, "GPA:", txtGpa);
        addFormField(mainPanel, gbc, 8, "Status:", cmbStatus);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.setBackground(Color.WHITE);
        
        ModernButton btnSave = new ModernButton("Save");
        ModernButton btnCancel = new ModernButton("Cancel");
        btnCancel.setBackground(new Color(220, 53, 69));
        
        btnSave.addActionListener(e -> saveStudent());
        btnCancel.addActionListener(e -> dispose());
        
        buttonPanel.add(btnSave);
        buttonPanel.add(btnCancel);
        
        add(mainPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
    }
    
    private void addFormField(JPanel panel, GridBagConstraints gbc, int row, String label, JComponent field) {
        gbc.gridx = 0;
        gbc.gridy = row;
        gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.NONE;
        
        JLabel lbl = new JLabel(label);
        lbl.setFont(new Font("Segoe UI", Font.BOLD, 14));
        panel.add(lbl, gbc);
        
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        panel.add(field, gbc);
    }
    
    private void setupEvents() {
        // Input validation
        txtGpa.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c) && c != '.' && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
            }
        });
    }
    
    private void populateFields() {
        txtStudentId.setText(student.getStudentId());
        txtFirstName.setText(student.getFirstName());
        txtLastName.setText(student.getLastName());
        txtEmail.setText(student.getEmail());
        txtPhone.setText(student.getPhone());
        txtCourse.setText(student.getCourse());
        txtGpa.setText(String.valueOf(student.getGpa()));
        cmbStatus.setSelectedItem(student.getStatus());
        
        Calendar cal = Calendar.getInstance();
        cal.set(student.getDateOfBirth().getYear(), 
                student.getDateOfBirth().getMonthValue() - 1, 
                student.getDateOfBirth().getDayOfMonth());
        dateSpinner.setValue(cal.getTime());
    }
    
    private void saveStudent() {
        if (!validateInput()) return;
        
        String studentId = txtStudentId.getText().trim();
        
        // Check for duplicate ID (only for new students or changed ID)
        if (student == null || !student.getStudentId().equals(studentId)) {
            if (studentService.isStudentIdExists(studentId)) {
                JOptionPane.showMessageDialog(this, "Student ID already exists!");
                return;
            }
        }
        
        try {
            Date selectedDate = (Date) dateSpinner.getValue();
            Calendar cal = Calendar.getInstance();
            cal.setTime(selectedDate);
            LocalDate dateOfBirth = LocalDate.of(cal.get(Calendar.YEAR), 
                                                cal.get(Calendar.MONTH) + 1, 
                                                cal.get(Calendar.DAY_OF_MONTH));
            
            if (student == null) {
                student = new Student(studentId, txtFirstName.getText().trim(),
                                    txtLastName.getText().trim(), txtEmail.getText().trim(),
                                    txtPhone.getText().trim(), dateOfBirth,
                                    txtCourse.getText().trim(), Double.parseDouble(txtGpa.getText()),
                                    (String) cmbStatus.getSelectedItem());
            } else {
                student.setStudentId(studentId);
                student.setFirstName(txtFirstName.getText().trim());
                student.setLastName(txtLastName.getText().trim());
                student.setEmail(txtEmail.getText().trim());
                student.setPhone(txtPhone.getText().trim());
                student.setDateOfBirth(dateOfBirth);
                student.setCourse(txtCourse.getText().trim());
                student.setGpa(Double.parseDouble(txtGpa.getText()));
                student.setStatus((String) cmbStatus.getSelectedItem());
            }
            
            confirmed = true;
            dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error saving student: " + ex.getMessage());
        }
    }
    
    private boolean validateInput() {
        if (txtStudentId.getText().trim().isEmpty() ||
            txtFirstName.getText().trim().isEmpty() ||
            txtLastName.getText().trim().isEmpty() ||
            txtEmail.getText().trim().isEmpty() ||
            txtCourse.getText().trim().isEmpty() ||
            txtGpa.getText().trim().isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "Please fill in all required fields!");
            return false;
        }
        
        try {
            double gpa = Double.parseDouble(txtGpa.getText());
            if (gpa < 0.0 || gpa > 4.0) {
                JOptionPane.showMessageDialog(this, "GPA must be between 0.0 and 4.0!");
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid GPA format!");
            return false;
        }
        
        return true;
    }
    
    public boolean isConfirmed() {
        return confirmed;
    }
    
    public Student getStudent() {
        return student;
    }
}

// Main Application
public class Main extends JFrame {
    private StudentService studentService;
    private JTable studentTable;
    private StudentTableModel tableModel;
    private ModernTextField searchField;
    private JLabel statusLabel;
    
    public Main() {
        studentService = new StudentService();
        initComponents();
        setupUI();
        setupEvents();
        refreshTable();
        
        setTitle("Student Management System");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1000, 700);
        setLocationRelativeTo(null);
        setMinimumSize(new Dimension(800, 600));
    }
    
    private void initComponents() {
        // Initialize table
        tableModel = new StudentTableModel(studentService.getAllStudents());
        studentTable = new JTable(tableModel);
        setupTable();
        
        // Search field
        searchField = new ModernTextField();
        searchField.putClientProperty("JTextField.placeholderText", "Search students...");
        
        // Status label
        statusLabel = new JLabel("Ready");
        statusLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
    }
    
    private void setupTable() {
        studentTable.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        studentTable.setRowHeight(25);
        studentTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        studentTable.setGridColor(new Color(240, 240, 240));
        studentTable.setShowVerticalLines(true);
        studentTable.setShowHorizontalLines(true);
        
        // Header styling
        JTableHeader header = studentTable.getTableHeader();
        header.setFont(new Font("Segoe UI", Font.BOLD, 14));
        header.setBackground(new Color(52, 73, 94));
        header.setForeground(Color.WHITE);
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 35));
        
        // Column widths
        TableColumnModel columnModel = studentTable.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(80);  // ID
        columnModel.getColumn(1).setPreferredWidth(150); // Name
        columnModel.getColumn(2).setPreferredWidth(200); // Email
        columnModel.getColumn(3).setPreferredWidth(120); // Phone
        columnModel.getColumn(4).setPreferredWidth(150); // Course
        columnModel.getColumn(5).setPreferredWidth(80);  // GPA
        columnModel.getColumn(6).setPreferredWidth(100); // Status
    }
    
    private void setupUI() {
        setLayout(new BorderLayout());
        getContentPane().setBackground(Color.WHITE);
        
        // Title Panel
        JPanel titlePanel = createTitlePanel();
        add(titlePanel, BorderLayout.NORTH);
        
        // Control Panel
        JPanel controlPanel = createControlPanel();
        add(controlPanel, BorderLayout.WEST);
        
        // Table Panel
        JPanel tablePanel = createTablePanel();
        add(tablePanel, BorderLayout.CENTER);
        
        // Status Panel
        JPanel statusPanel = createStatusPanel();
        add(statusPanel, BorderLayout.SOUTH);
    }
    
    private JPanel createTitlePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(52, 73, 94));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        JLabel titleLabel = new JLabel("Student Management System");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        titleLabel.setForeground(Color.WHITE);
        
        JLabel subtitleLabel = new JLabel("Manage student records efficiently");
        subtitleLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        subtitleLabel.setForeground(new Color(200, 200, 200));
        
        JPanel textPanel = new JPanel(new BorderLayout());
        textPanel.setOpaque(false);
        textPanel.add(titleLabel, BorderLayout.CENTER);
        textPanel.add(subtitleLabel, BorderLayout.SOUTH);
        
        panel.add(textPanel, BorderLayout.WEST);
        
        return panel;
    }
    
    private JPanel createControlPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(new Color(248, 249, 250));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 15, 20, 15));
        panel.setPreferredSize(new Dimension(200, 0));
        
        // Search section
        JLabel searchLabel = new JLabel("Search");
        searchLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        searchLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        panel.add(searchLabel);
        panel.add(Box.createVerticalStrut(10));
        
        searchField.setMaximumSize(new Dimension(Integer.MAX_VALUE, 35));
        searchField.setAlignmentX(Component.LEFT_ALIGNMENT);
        panel.add(searchField);
        panel.add(Box.createVerticalStrut(20));
        
        // Actions section
        JLabel actionsLabel = new JLabel("Actions");
        actionsLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        actionsLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        panel.add(actionsLabel);
        panel.add(Box.createVerticalStrut(10));
        
        ModernButton btnAdd = new ModernButton("Add Student");
        ModernButton btnEdit = new ModernButton("Edit Student");
        ModernButton btnDelete = new ModernButton("Delete Student");
        ModernButton btnRefresh = new ModernButton("Refresh");
        
        btnAdd.setMaximumSize(new Dimension(Integer.MAX_VALUE, 35));
        btnEdit.setMaximumSize(new Dimension(Integer.MAX_VALUE, 35));
        btnDelete.setMaximumSize(new Dimension(Integer.MAX_VALUE, 35));
        btnRefresh.setMaximumSize(new Dimension(Integer.MAX_VALUE, 35));
        
        btnAdd.setAlignmentX(Component.LEFT_ALIGNMENT);
        btnEdit.setAlignmentX(Component.LEFT_ALIGNMENT);
        btnDelete.setAlignmentX(Component.LEFT_ALIGNMENT);
        btnRefresh.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        panel.add(btnAdd);
        panel.add(Box.createVerticalStrut(8));
        panel.add(btnEdit);
        panel.add(Box.createVerticalStrut(8));
        panel.add(btnDelete);
        panel.add(Box.createVerticalStrut(8));
        panel.add(btnRefresh);
        panel.add(Box.createVerticalGlue());
        
        // Event listeners
        btnAdd.addActionListener(e -> addStudent());
        btnEdit.addActionListener(e -> editStudent());
        btnDelete.addActionListener(e -> deleteStudent());
        btnRefresh.addActionListener(e -> refreshTable());
        
        return panel;
    }
    
    private JPanel createTablePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        JScrollPane scrollPane = new JScrollPane(studentTable);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(220, 220, 220)));
        scrollPane.getViewport().setBackground(Color.WHITE);
        
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createStatusPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(248, 249, 250));
        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(220, 220, 220)),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        
        panel.add(statusLabel, BorderLayout.WEST);
        
        JLabel countLabel = new JLabel();
        countLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        panel.add(countLabel, BorderLayout.EAST);
        
        return panel;
    }
    
    private void setupEvents() {
        // Search functionality
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String query = searchField.getText().trim();
                if (query.isEmpty()) {
                    refreshTable();
                } else {
                    List<Student> filteredStudents = studentService.searchStudents(query);
                    tableModel.updateData(filteredStudents);
                    updateStatus("Found " + filteredStudents.size() + " students");
                }
            }
        });
        
        // Double-click to edit
        studentTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    editStudent();
                }
            }
        });
    }
    
    private void addStudent() {
        StudentFormDialog dialog = new StudentFormDialog(this, "Add New Student", null, studentService);
        dialog.setVisible(true);
        
        if (dialog.isConfirmed()) {
            studentService.addStudent(dialog.getStudent());
            refreshTable();
            updateStatus("Student added successfully");
        }
    }
    
    private void editStudent() {
        int selectedRow = studentTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to edit.");
            return;
        }
        
        Student student = tableModel.getStudentAt(selectedRow);
        StudentFormDialog dialog = new StudentFormDialog(this, "Edit Student", student, studentService);
        dialog.setVisible(true);
        
        if (dialog.isConfirmed()) {
            studentService.updateStudent(selectedRow, dialog.getStudent());
            refreshTable();
            updateStatus("Student updated successfully");
        }
    }
    
    private void deleteStudent() {
        int selectedRow = studentTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to delete.");
            return;
        }
        
        Student student = tableModel.getStudentAt(selectedRow);
        int result = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete " + student.getFullName() + "?",
                "Confirm Delete", JOptionPane.YES_NO_OPTION);
        
        if (result == JOptionPane.YES_OPTION) {
            studentService.deleteStudent(selectedRow);
            refreshTable();
            updateStatus("Student deleted successfully");
        }
    }
    
    private void refreshTable() {
        tableModel.updateData(studentService.getAllStudents());
        updateStatus("Data refreshed - " + studentService.getAllStudents().size() + " students");
    }
    
    private void updateStatus(String message) {
        statusLabel.setText(message);
        javax.swing.Timer timer = new javax.swing.Timer(3000, e -> statusLabel.setText("Ready"));
        timer.setRepeats(false);
        timer.start();
    }
    
    public static void main(String[] args) {
        // Set Look and Feel
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
            // If Nimbus is not available, use default
            System.out.println("Nimbus Look and Feel not available, using default.");
        }
        
        // Enable anti-aliasing for better text rendering
        System.setProperty("awt.useSystemAAFontSettings", "on");
        System.setProperty("swing.aatext", "true");
        
        SwingUtilities.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }
